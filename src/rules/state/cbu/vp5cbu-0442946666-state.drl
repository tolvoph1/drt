package com.nortel.ema.swisscom.bal.state

/*
	@(#) $Id: vp5cbu-0442946666-state.drl 23 2013-08-12 14:45:27Z tolvoph1 $
	$Author: tolvoph1 $
*/

import com.nortel.ema.swisscom.bal.vo.model.CustomerProfile;
import com.nortel.ema.swisscom.bal.vo.model.CustomerProducts;
import com.nortel.ema.swisscom.bal.vo.model.CallProfile;
import com.nortel.ema.swisscom.bal.vo.model.CallDetail;
import com.nortel.ema.swisscom.bal.vo.model.ServiceConfigurationMap;
import com.nortel.ema.swisscom.bal.rules.model.StateEngineRulesResult;
import com.nortel.ema.swisscom.bal.rules.model.facts.R5RulesBean;
import java.util.Set;
import java.util.Date;


/* 
 First state:
 - Init without ANI -> play jingle
 - Init with ANI -> SetPNFromSession
 */
rule "001_Init_NoAniPlayJingle"
	no-loop
	salience -100
	when
		(
			CallProfile ( nextState == "Init", ani == "" ) || 
			CallProfile ( nextState == "Init", ani == "0" ) || 
			CallProfile ( nextState == "Init", ani == null )    
		)
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("SPEAK");		
		serr.setOutputVar1("jingle");
		serr.setNextState("NoWelcome");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "001_Init_GotAniSetPNFromSession"
	no-loop
	salience -1000
	when
		CallProfile ( nextState == "Init" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("SETPNFROMSESSION");		
		serr.setOutputVar1("true");
		serr.setNextState("NoWelcome");
		serr.setState(StateEngineRulesResult.DONE);
end

/* 
  Welcome rule for caller from single language area, no language selection offered
  CallProfile key "singleLanguage" is "true"
*/
rule "010_SingleLanguage"
	no-loop
	when
		CallProfile ( nextState == "NoWelcome", singleLanguage != "false" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("CaseBasedRouting");
		serr.setState(StateEngineRulesResult.DONE);
end

/* 
  Welcome rule for caller from multi language area
  CallProfile key "singleLanguage" is "false"
*/
rule "010_MultiLanguage"
	no-loop
	when
		CallProfile ( nextState == "NoWelcome", singleLanguage == "false" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("LanguageSelection");
		serr.setState(StateEngineRulesResult.DONE);
end

/* 
  Language Selection
*/

rule "020_LanguageSelection"
	no-loop
	when
		CallProfile ( nextState == "LanguageSelection" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("LANGSELECT");
		serr.setNextState("CaseBasedRouting");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Case Based Routing
*/

rule "110_CaseBasedRouting"
	no-loop
	when
		CallProfile ( nextState == "CaseBasedRouting" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("CBR");
		serr.setNextState("CheckCBRActionResponse");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Check actionResponse from CBR, if it's transfer, then transfer
*/

rule "115a_CaseBasedRouting_actionResponse_Transfer"
	no-loop
	when
		CallProfile ( nextState == "CheckCBRActionResponse", actionResponse == "TRANSFER" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Check actionResponse from CBR, not transfer, then proceed with flow
*/

rule "115b_CaseBasedRouting_actionResponse_NoTransfer"
	no-loop
	when
		CallProfile ( nextState == "CheckCBRActionResponse", actionResponse != "TRANSFER" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("GetResultCustomerInformation");
		serr.setState(StateEngineRulesResult.DONE);
end


/*
  After Welcome/Welcome Prompt retrieve Customer Information from BAL to determine
  language that should be used in a multilingual environment

*/
rule "120_GetResultCustomerInformation"
	no-loop
	when
		CallProfile ( nextState == "GetResultCustomerInformation" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("GETRESULTCUSTINFO");
		serr.setNextState("EmergencyAnnouncements");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Emergency announcements
*/

rule "130_EmergencyAnnouncements_Set"
	no-loop
	when
		CallProfile ( nextState == "EmergencyAnnouncements" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("SETINASACTIONS");
		serr.setOutputVar1("CBU-CS");
		serr.setNextState("PlayEmergencyAnnouncements");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "135_EmergencyAnnouncements_Play"
	no-loop
	when
		CallProfile ( nextState == "PlayEmergencyAnnouncements" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("EXECINASACTIONS");
		serr.setOutputVar1("MAIN");
		serr.setNextState("MenuLevel1");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Menu level 1
*/

rule "140_MenuLevel1"
	no-loop
	when
		CallProfile ( nextState == "MenuLevel1" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("EXTENDEDMENU");
		serr.setOutputVar1("cbu/vp5cbu-0442946666-menu-level1");
		serr.setOutputVar2("CBU-CS");
		serr.setOutputVar3("cbu/vp5cbu-0442946666-menu-level1");
		serr.addToOutputColl1("select", "alm-menue-please-select"); 
		serr.setNextState("CheckMenuSelectionLevel1");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Menu level 1 has been offered, check if we need a second menu level or transfer
  actionResponse is "MENU", nextMenuName contains name of the rules for the next level
*/

rule "150_CheckMenuSelectionLevel1AnotherMenuLevel"
	no-loop
	when
		callProfile:CallProfile ( nextState == "CheckMenuSelectionLevel1", actionResponse == "MENU" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("EXTENDEDMENU");
		serr.setOutputVar1("cbu/vp5cbu-0442946666-menu-level2");
		serr.setOutputVar2("CBU-CS");
		serr.setOutputVar3("cbu/vp5cbu-0442946666-menu-level2");
		serr.addToOutputColl1("select", "pm-menue-please-select"); 
		serr.setNextState("CheckMenuSelectionLevel2");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Menu level 1 has been offered
  actionResponse is "TRANSFER", so we proceed with transfer
  NextState: Disconnect
*/
rule "150_CheckMenuSelectionLevel1Transfer"
	no-loop
	when
		callProfile:CallProfile ( nextState == "CheckMenuSelectionLevel1", actionResponse == "TRANSFER" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Menu level 1 has been offered
  actionResponse is "InputError", so we proceed with transfer
  NextState: Disconnect
*/
rule "150_CheckMenuSelectionLevel1InputError"
	no-loop
	salience 5
	when
		callProfile:CallProfile ( nextState == "CheckMenuSelectionLevel1", actionResponse == "InputError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end


/*
  Menu level 2 has been offered
  There is always a transfer after menu level 2, so no check for actionResponse
*/

rule "160_CheckMenuSelectionLevel2"
	no-loop
	when
		callProfile:CallProfile ( nextState == "CheckMenuSelectionLevel2")
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

/*
  Menu level 2 has been offered
  InputError
*/

rule "160_CheckMenuSelectionLevel2InputError"
	no-loop
	salience 5
	when
		callProfile:CallProfile ( nextState == "CheckMenuSelectionLevel2", actionResponse == "InputError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "200_Transfer"
	no-loop
	when
		CallProfile ( nextState == "Transfer" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("TRANSFER");
		serr.setOutputVar1("cbu/vp5cbu-0442946666-transfer");
		serr.setNextState("Disconnect");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "210_Disconnect"
	no-loop
	when
		CallProfile ( nextState == "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("DISCONNECT");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "998_FALLBACK_TRANSFER"
	no-loop
	salience -10000
	when
		callProfile: CallProfile ( nextState != "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "999_FALLBACK_DISCONNECT"
	no-loop
	salience -20000
	when
		CallProfile ( nextState == "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("DISCONNECT");
		serr.setNextState("ThisShouldNeverHappen");
		serr.setState(StateEngineRulesResult.DONE);
end
