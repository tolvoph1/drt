package com.nortel.ema.swisscom.bal.state

/*
	@(#) $Id: vp5res-0800817175-state.drl 155 2013-11-27 14:32:18Z tolvoph1 $
	$Author: tolvoph1 $
	
	CFS Customer Workflow
	0800 817 175

*/

import com.nortel.ema.swisscom.bal.vo.model.CustomerProfile;
import com.nortel.ema.swisscom.bal.vo.model.CustomerProducts;
import com.nortel.ema.swisscom.bal.vo.model.CallProfile;
import com.nortel.ema.swisscom.bal.vo.model.CallDetail;
import com.nortel.ema.swisscom.bal.vo.model.ServiceConfigurationMap;
import com.nortel.ema.swisscom.bal.rules.model.StateEngineRulesResult;
import com.nortel.ema.swisscom.bal.rules.model.facts.R5RulesBean;
import java.util.Set;
import java.util.Date;
import org.apache.commons.lang.StringUtils;

/*
	Initialize Rules Bean and check for String values in passed
	parameters. Put those in "constants" attributes of the bean
*/
rule "0001_Init_R5RulesBean"
	no-loop
	salience 20000
	when
		not (R5RulesBean(  ))
	then
		assert ( new R5RulesBean(), true );
end

/* ****************************************************************************************
   Start of the rules
   ****************************************************************************************/

rule "010_Init"
	no-loop
	when
		CallProfile ( nextState == "Init" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");		
		serr.setNextState("LanguageSelection");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "020_LanguageSelection"
	no-loop
	when
		CallProfile ( nextState == "LanguageSelection" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("LANGSELECT");
		serr.setOutputVar1("false");
		serr.setOutputVar2("dfi");
		serr.setNextState("MenuLevel1");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "030_MenuLevel1"
	no-loop
	when
		CallProfile ( nextState == "MenuLevel1" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("EXTENDEDMENU");
		serr.setOutputVar1("CFSCustomerAnliegenMenu");
		serr.setOutputVar3("oneIVR/vp5resAnliegenMenuCFSCustomer");
		serr.addToOutputColl1("select", "cfs-customer-menu-AA-EM-PPS"); 
		serr.addToOutputColl1("select-NI-1", "cfs-customer-menu-AA-EM-PPS");
		serr.addToOutputColl1("select-NI-2", "cfs-customer-menu-AA-EM-PPS");
		serr.addToOutputColl1("select-NM-1", "cfs-customer-menu-AA-EM-PPS");
		serr.addToOutputColl1("select-NM-2", "cfs-customer-menu-AA-EM-PPS");
		serr.addToOutputColl1("select-HELP", "cfs-customer-menu-AA-EM-PPS");
		serr.setNextState("OpeningHours");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "040a_OpeningHours_Menu_AA"
	no-loop
	when
		callProfile: CallProfile ( nextState == "OpeningHours" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
		eval (
				StringUtils.equals((String)callProfile.get("CFSCustomerAnliegenMenu"),"AA")
			 )
	then
		serr.setAction("CHECKOH");
		serr.setOutputVar1("OH_RES_CFS_CUSTOMER_AA");
		serr.setNextState("CheckOHResult");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "040b_OpeningHours_Menu_EM"
	no-loop
	when
		callProfile: CallProfile ( nextState == "OpeningHours" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
		eval (
				StringUtils.equals((String)callProfile.get("CFSCustomerAnliegenMenu"),"EM")
			 )
	then
		serr.setAction("CHECKOH");
		serr.setOutputVar1("OH_RES_CFS_CUSTOMER_EM");
		serr.setNextState("CheckOHResult");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "040c_OpeningHours_Menu_PPS"
	no-loop
	when
		callProfile: CallProfile ( nextState == "OpeningHours" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
		eval (
				StringUtils.equals((String)callProfile.get("CFSCustomerAnliegenMenu"),"PPS")
			 )
	then
		serr.setAction("CHECKOH");
		serr.setOutputVar1("OH_RES_CFS_CUSTOMER_PPS");
		serr.setNextState("CheckOHResult");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "040d_OpeningHours_Menu_ErrorInput"
	no-loop
	salience -1
	when
		callProfile: CallProfile ( nextState == "OpeningHours" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("CHECKOH");
		serr.setOutputVar1("OH_RES_CFS_CUSTOMER_AA");
		serr.setNextState("CheckOHResult");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "050a_CheckOHResult_Closed"
	no-loop
	when
		CallProfile ( nextState == "CheckOHResult", resultOH != "open" ) 
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("SPEAK");
		serr.setOutputVar1("closed-bye");
		serr.setNextState("Disconnect");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "050b_CheckOHResult_Open"
	no-loop
	when
		CallProfile ( nextState == "CheckOHResult", resultOH == "open" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("EnterPLZ");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "060_EnterPLZ"
	no-loop
	when
	    callProfile: CallProfile ( nextState == "EnterPLZ")
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("ENTERPLZ");
		serr.setOutputVar1((String)callProfile.get("CFSCustomerAnliegenMenu"));
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "200_Disconnect"
	no-loop
	when
		CallProfile ( nextState == "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("DISCONNECT");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "201_GoodbyeDisconnect"
	no-loop
	when
		CallProfile ( nextState == "GoodbyeDisconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("GOODBYE");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "210_Transfer"
	no-loop
	when
		CallProfile ( nextState == "Transfer" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("TRANSFER");
		serr.setOutputVar1("oneIVR/vp5resTransfer");
		serr.setNextState("Disconnect");
		serr.setState(StateEngineRulesResult.DONE);
end

/* State for Exceptions caught by StateEngine Event Handlers */
rule "900_InputError"
	no-loop
	salience -500
	when
		CallProfile ( nextState == "InputError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "901_ConnectorError"
	no-loop
	salience -500
	when
		CallProfile ( nextState == "ConnectorError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "902_TechError"
	no-loop
	salience -500
	when
		CallProfile ( nextState == "TechError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "998_FALLBACK_TRANSFER"
	no-loop
	salience -10000
	when
		CallProfile ( nextState != "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "999_FALLBACK_DISCONNECT"
	no-loop
	salience -20000
	when
		CallProfile ( nextState == "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("DISCONNECT");
		serr.setNextState("ThisShouldNeverHappen");
		serr.setState(StateEngineRulesResult.DONE);
end