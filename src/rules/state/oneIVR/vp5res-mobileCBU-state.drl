package com.nortel.ema.swisscom.bal.state

/*
	@(#) $Id: vp5res-mobileCBU-state.drl 88 2013-09-10 10:03:20Z tolvoph1 $
	$Author: tolvoph1 $
*/

import com.nortel.ema.swisscom.bal.vo.model.CustomerProfile;
import com.nortel.ema.swisscom.bal.vo.model.CustomerProducts;
import com.nortel.ema.swisscom.bal.vo.model.CallProfile;
import com.nortel.ema.swisscom.bal.vo.model.CallDetail;
import com.nortel.ema.swisscom.bal.vo.model.ServiceConfigurationMap;
import com.nortel.ema.swisscom.bal.rules.model.StateEngineRulesResult;
import com.nortel.ema.swisscom.bal.rules.model.facts.R5RulesBean;
import java.util.Set;
import java.util.Date;

/*
	Initialize Rules Bean and check for String values in passed
	parameters. Put those in "constants" attributes of the bean
*/
rule "001_Init_R5RulesBean"
	no-loop
	salience 20000
	when
		not (R5RulesBean(  ))
	then
		assert ( new R5RulesBean(), true );
end

/*
	Rules to populate the beans used for easier reading, writing and changing of the rules
*/

/*
	AgeBasedRouting, populate the bean attributes realted to customer age
*/
rule "005_PopulateAgeDetails"
	no-loop
	salience 10000
	when
	  customerProfile: CustomerProfile ( )
	  serviceconfig: ServiceConfigurationMap()
	  eval (
			customerProfile.getAge() != null &&
			serviceconfig.get("vp.res.caller.MaxAge") != null &&
			serviceconfig.get("vp.res.caller.BestAgeStart") != null
		)
		r5b: R5RulesBean()
	then
		r5b.setCustomerAge(customerProfile.getAge());
		r5b.setMaxAge((String)serviceconfig.get("vp.res.caller.MaxAge"));
		r5b.setBestAge((String)serviceconfig.get("vp.res.caller.BestAgeStart"));
end

/* ****************************************************************************************
   Start of the rules
   ****************************************************************************************/

/* 
 First state 
 */
rule "010_InitMobileCBU"
	no-loop
	when
		CallProfile ( nextState == "InitMobileCBU" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
        serr.setAction("EXECINASACTIONS");
        serr.setOutputVar1("MAIN");
		serr.setNextState("CheckForOptionOffer");
		serr.setState(StateEngineRulesResult.DONE);
end


/* CRQ2012-086 Check for Option Offer MDS End User Support*/
rule "020_CheckForOptionOffer"
	no-loop
	when
		callProfile: CallProfile ( nextState == "CheckForOptionOffer" )
		customerProfile: CustomerProfile()
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("CHECKOPTIONOFFER");
		serr.addToOutputColl1("scn", customerProfile.getCustomerID());
		serr.addToOutputColl1("optionOffer", "MDS End User Support");
		serr.addToOutputColl1("phonenumber", callProfile.getPhonenumber());
		serr.setNextState("MobileCBUAnliegenMenu");
		serr.setState(StateEngineRulesResult.DONE);
end

/* Mobile CBU MenuLevel1/AnliegenMenu */
rule "100_MobileCBU_AnliegenMenu"
	no-loop
	salience -100
	when
		CallProfile ( nextState == "MobileCBUAnliegenMenu" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("EXTENDEDMENU");
		serr.setOutputVar1("oneIVRresAnliegenMenu");
		serr.setOutputVar3("oneIVR/vp5resAnliegenMenuMobileCBU");
		serr.addToOutputColl1("select", "alm-menue-please-select"); 
		serr.setNextState("CheckMobileCBUAnliegenMenuResponse");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "105_MobileCBUAnliegenMenuResponse_Transfer"
	no-loop
	salience -100
	when
		CallProfile ( nextState == "CheckMobileCBUAnliegenMenuResponse" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

/* Call End States */
rule "500_Disconnect"
	no-loop
	when
		CallProfile ( nextState == "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("DISCONNECT");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "501_GoodbyeDisconnect"
	no-loop
	when
		CallProfile ( nextState == "GoodbyeDisconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("GOODBYE");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "502_Transfer"
	no-loop
	when
		CallProfile ( nextState == "Transfer" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("TRANSFER");
		serr.setOutputVar1("oneIVR/vp5resTransfer");
		serr.setNextState("Disconnect");
		serr.setState(StateEngineRulesResult.DONE);
end

/* State for Exceptions caught by StateEngine Event Handlers */
rule "900_InputError"
	no-loop
	salience -500
	when
		CallProfile ( nextState == "InputError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "901_ConnectorError"
	no-loop
	salience -500
	when
		CallProfile ( nextState == "ConnectorError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "902_TechError"
	no-loop
	salience -500
	when
		CallProfile ( nextState == "TechError" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

/* Catch-All States */
rule "998_FALLBACK_TRANSFER"
	no-loop
	salience -10000
	when
		CallProfile ( nextState != "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("PROCEED");
		serr.setNextState("Transfer");
		serr.setState(StateEngineRulesResult.DONE);
end

rule "999_FALLBACK_DISCONNECT"
	no-loop
	salience -20000
	when
		CallProfile ( nextState == "Disconnect" )
		serr : StateEngineRulesResult(state == StateEngineRulesResult.NOT_SET )
	then
		serr.setAction("DISCONNECT");
		serr.setNextState("ThisShouldNeverHappen");
		serr.setState(StateEngineRulesResult.DONE);
end
